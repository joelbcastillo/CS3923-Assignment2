"""
This security layer interposes size restrictions on a file.  If a call is made
to setmaxfilesize, the file must not be allowed to grow larger than the
specified value.  If a user tries to write that starts before the end of file
and extends past the allowed size, bytes past the allowed size are discarded.
If a write starts at or past the allowed size, a SeekPastEndOfFileError must
be raised.  If a file already contains more than the maximum file size bytes
when the call is made, the file must be truncated so that it is of the
appropriate size. It should also raise ValueError if the size to be set is not
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"


class SecureFile():
  def __init__(self,file, fileName):
    # globals
    # local (per object) reference to the underlying file
    self.file = file

    mycontext['curFileSize'] = 0
    mycontext['fileName'] = fileName
    mycontext['debug'] = False
    mycontext['fileSizeLimit'] = None

    # Locks, this is to make sure only one thread is reading or writing at any time
    # log('creating readLock\n')
    mycontext['readLock'] = secure_createlock()
    # log('creating writeLock\n')
    mycontext['writeLock'] = secure_createlock()


  def truncatefile(self, size):
    truncatedData = self.readat(size, 0)


    # log('releasing locks\n')
    mycontext['readLock'].release()
    mycontext['writeLock'].release()

    #Close the file
    self.file.close()
    #remove the file
    removefile(mycontext['fileName'])
    #open it again
    self.file = openfile(mycontext['fileName'],True)  #Open a file

    mycontext['readLock'].acquire(bool(1)) # will block if lock is already held
    mycontext['writeLock'].acquire(bool(1))


    #write truncated data
    self.writeat(truncatedData, 0)

  def setmaxfilesize(self,size):

    mycontext['readLock'].acquire(bool(1)) # will block if lock is already held
    mycontext['writeLock'].acquire(bool(1))

    #rFileLock.acquire(bool(1)) # will block if lock is already held
    #wFileLock.acquire(bool(1))
    #writelock.acquire(1)

    # log('Current File size Limit: ' + str(mycontext['fileSizeLimit']) + '\n')
    # log('Current File size: ' + str(mycontext['curFileSize']) + '\n')
    # log('Proposed File Size Limit: ' + str(size) + '\n')

    #truncate file if needed
    if size == None:
      mycontext['fileSizeLimit'] = None
    elif size < mycontext['curFileSize']:
      self.truncatefile(size)
      mycontext['curFileSize'] = size

    else:
      mycontext['fileSizeLimit'] = size

    # log('New File Size Limit set to: ' + str(mycontext['fileSizeLimit']) + '\n\n')

    # log('releasing locks\n')
    mycontext['readLock'].release()
    mycontext['writeLock'].release()

    #rFileLock.release()
    #wFileLock.release()

  def writeat(self,data,offset):
    mycontext['readLock'].acquire(bool(1)) # will block if lock is already held
    mycontext['writeLock'].acquire(bool(1))

    #rFileLock.acquire(bool(1)) # will block if lock is already held
    #wFileLock.acquire(bool(1))

    if(offset < 0):
      raise RepyArgumentError #offset can't be < 0

    newDataSize = len(data)
    curFileSize = mycontext['curFileSize']
    fileSizeLimit = mycontext['fileSizeLimit']

    if offset + newDataSize  <= curFileSize:
      newFileSize = curFileSize
      additionalDataSize = 0
    else:
      additionalDataSize = offset + newDataSize - curFileSize
      newFileSize = curFileSize + additionalDataSize

    if fileSizeLimit:
      pass
      # log('Current File Size Limit: ' + str(fileSizeLimit) + '\n')
      # log('Current File size: ' + str(curFileSize) + '\n')
      # log('Size of new Data: ' + str(newDataSize) + ' at position: ' + str(offset) + '\n')

    # log('New File Size after writing new data: ' + str(newFileSize) + '\n')

    #raise error if user try to write after EOF or current fileSize limit
    if (offset > curFileSize) or (fileSizeLimit and offset > fileSizeLimit) :
      # log("Offset out of current file size or EOF or fileSizeLimit!\n")
      # log('releasing locks\n')
      mycontext['readLock'].release()
      mycontext['writeLock'].release()
      # rFileLock.release()
      # wFileLock.release()
      raise SeekPastEndOfFileError("Offset out of current file size or EOF or fileSizeLimit!")

    #Don't raise error if user is trying to write more than file size limit. write only upto file size limit
    if fileSizeLimit and newFileSize > fileSizeLimit:
      extraDataSize = offset + newDataSize - fileSizeLimit
      additionalDataSizeWithinLimits = newDataSize - extraDataSize
      # log('additionalDataSizeWithinLimits: ' + str(additionalDataSizeWithinLimits) + '\n')
      trimData = data[:additionalDataSizeWithinLimits]
      # log('\nNew trimmed data: ' + trimData + '\n\n')
      data = trimData
      additionalDataSize = additionalDataSizeWithinLimits
      #update current file size
      mycontext['curFileSize'] = fileSizeLimit
    else:
      #update current file size
      mycontext['curFileSize'] = newFileSize

    # Write the requested data to the file using the sandbox's writeat call
    self.file.writeat(data,offset)

    # log('releasing locks\n')
    mycontext['readLock'].release()
    mycontext['writeLock'].release()

    # log('Data written\n')
    # rFileLock.release()
    # wFileLock.release()
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    # readLock = mycontext['readLock']
    # writeLock = mycontext['writeLock']
    # readLock.release()
    # writeLock.release()
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f,filename)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "truncatefile":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.truncatefile},
                "writeat":
                {"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile


class SecureLock():
  def __init__(self,lock):
    self.lock = lock

  def acquire(self, blocking):
    return self.lock.acquire(blocking)

  def release(self):
    return self.lock.release()

sec_lock_def = {"obj-type":SecureLock,
                  "name":"SecureLock",
                  "acquire":{"type":"func","args":(bool,),"return":bool,"exceptions":None,"target":SecureLock.acquire},
                  "release":{"type":"func","args":None,"return":None,"exceptions":Exception,"target":SecureLock.release},
                 }

def secure_createlock():
  l = createlock()
  return SecureLock(l)

CHILD_CONTEXT_DEF["createlock"] = {"type":"func","args":None,"exceptions":None,"return":sec_lock_def,"target":secure_createlock}

rFileLock = secure_createlock()
wFileLock = secure_createlock()



# Execute the user code
secure_dispatch_module()
